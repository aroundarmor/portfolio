name: Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      force_push:
        description: 'Force push to Docker Hub (even on PR)'
        required: false
        default: false
        type: boolean
      skip_security_scan:
        description: 'Skip Trivy security scanning'
        required: false
        default: false
        type: boolean
      custom_tag:
        description: 'Custom tag for Docker image (optional)'
        required: false
        type: string

env:
  DOCKER_IMAGE: aroundarmor/portfolio
  DOCKERFILE_PATH: docker-package/Dockerfile

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.force_push == true)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          type=raw,value=${{ inputs.custom_tag }},enable=${{ inputs.custom_tag != '' }}
          type=raw,value=${{ inputs.environment }}-latest,enable=${{ github.event_name == 'workflow_dispatch' }}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        push: ${{ github.event_name != 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.force_push == true) }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Run Trivy vulnerability scanner
      if: inputs.skip_security_scan != true
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        cache-dir: '.trivycache'
        
    - name: Upload Trivy scan results to GitHub Security tab
      if: always() && inputs.skip_security_scan != true
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (table format)
      if: inputs.skip_security_scan != true
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'table'
        cache-dir: '.trivycache'
        
    - name: Image digest
      run: echo ${{ steps.build.outputs.digest }}
      
    - name: Notify deployment success
      if: success() && (github.event_name != 'pull_request' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.force_push == true)
      run: |
        echo "üöÄ Successfully deployed Docker image to Docker Hub!"
        echo "üì¶ Image: ${{ env.DOCKER_IMAGE }}"
        echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
        echo "üîó View on Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_IMAGE }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "üéØ Manual trigger with environment: ${{ inputs.environment }}"
          if [ "${{ inputs.custom_tag }}" != "" ]; then
            echo "üè∑Ô∏è  Custom tag: ${{ inputs.custom_tag }}"
          fi
        fi
        
    - name: Create deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const { sha } = context;
          const { eventName, ref, actor, workflow, runId } = context;
          const { inputs } = context.payload;
          
          const status = '${{ job.status }}';
          const isSuccess = status === 'success';
          const isFailure = status === 'failure';
          
          // Create deployment status
          const deployment = await github.rest.repos.createDeployment({
            owner,
            repo,
            ref: sha,
            environment: inputs?.environment || 'production',
            description: `Docker build and deploy - ${workflow}`,
            auto_merge: false,
            required_contexts: []
          });
          
          // Create deployment status
          await github.rest.repos.createDeploymentStatus({
            owner,
            repo,
            deployment_id: deployment.data.id,
            state: isSuccess ? 'success' : isFailure ? 'failure' : 'pending',
            description: isSuccess 
              ? `‚úÖ Docker image deployed successfully to Docker Hub`
              : isFailure 
                ? `‚ùå Docker build/deploy failed`
                : `‚è≥ Docker build in progress`,
            environment_url: isSuccess ? `https://hub.docker.com/r/${{ env.DOCKER_IMAGE }}` : undefined
          });
          
          // Add comment to commit for detailed info
          if (isSuccess || isFailure) {
            const comment = isSuccess 
              ? `## ‚úÖ Deployment Successful
              
              **Repository**: ${owner}/${repo}
              **Branch**: ${ref.replace('refs/heads/', '')}
              **Commit**: ${sha}
              **Author**: ${actor}
              **Workflow**: ${workflow}
              **Trigger**: ${eventName}${inputs?.environment ? ` (Environment: ${inputs.environment})` : ''}
              
              üöÄ **Docker Image**: ${{ env.DOCKER_IMAGE }}
              üè∑Ô∏è **Tags**: ${{ steps.meta.outputs.tags }}
              ${inputs?.custom_tag ? `üè∑Ô∏è **Custom Tag**: ${inputs.custom_tag}` : ''}
              
              **Links**:
              - [View Workflow Run](https://github.com/${owner}/${repo}/actions/runs/${runId})
              - [View on Docker Hub](https://hub.docker.com/r/${{ env.DOCKER_IMAGE }})
              `
              : `## ‚ùå Deployment Failed
              
              **Repository**: ${owner}/${repo}
              **Branch**: ${ref.replace('refs/heads/', '')}
              **Commit**: ${sha}
              **Author**: ${actor}
              **Workflow**: ${workflow}
              **Trigger**: ${eventName}
              
              **Error**: Pipeline failed at step: ${status}
              
              **Links**:
              - [View Failed Run](https://github.com/${owner}/${repo}/actions/runs/${runId})
              - [Check Logs](https://github.com/${owner}/${repo}/actions/runs/${runId})
              `;
              
            try {
              await github.rest.repos.createCommitComment({
                owner,
                repo,
                commit_sha: sha,
                body: comment
              });
            } catch (error) {
              console.log('Could not create commit comment:', error.message);
            }
          }
